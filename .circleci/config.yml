version: 2.1

orbs: 
    slack: circleci/slack@4.10.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.Workflow_ID >>
  notify_on_failure:
      steps:
        - slack/notify:
            event: fail
            channel: $SLACK_DEFAULT_CHANNEL
            template: basic_fail_1
  notify_on_success:
      steps:
        - slack/notify:
            event: pass
            channel: $SLACK_DEFAULT_CHANNEL
            template: success_tagged_deployment_1


  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
            
           
jobs:

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - Checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name "backend${CIRCLE_WORKFLOW_ID:0:5}" \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}
      #        exit 1
      #- run:
      #    name: Ensure front-end infrastructure exist
      #    command: |
      #      aws cloudformation deploy \
      #        --template-file .circleci/files/frontend.yml \
      #        --tags project=udapeople \
      #        --stack-name "frontend${CIRCLE_WORKFLOW_ID:0:5}" \
      #        --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5} 
      #        exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      #      exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: hesham98/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:2a:18:55:5b:74:1a:1b:95:41:51:67:89:64:53:8d"]
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            ls
            pwd
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vv
      #      exit 1
      # Here's where you will add some code to rollback on failure      

workflows:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
     
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]